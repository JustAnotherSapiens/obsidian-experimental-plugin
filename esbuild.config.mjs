import process from 'process';

import esbuild from 'esbuild';
import builtins from 'builtin-modules';


const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const production = (process.argv[2] === 'production');
const testBuild = (process.argv[2] === 'test' || process.argv[3] === 'test');

const entryPoint = !testBuild ? 'src/main.ts' : 'tests/main.test.ts';
const outFile = !testBuild ? 'main.js' : 'main.test.js';

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: [entryPoint],
	bundle: true,
	external: [
		'obsidian',
		'electron',
		'@codemirror/autocomplete',
		'@codemirror/collab',
		'@codemirror/commands',
		'@codemirror/language',
		'@codemirror/lint',
		'@codemirror/search',
		'@codemirror/state',
		'@codemirror/view',
		'@lezer/common',
		'@lezer/highlight',
		'@lezer/lr',
		...builtins],
	format: 'cjs',
	target: 'es2018',
	logLevel: 'info',
	// SOURCE MAP
	sourcemap: production ? false : 'inline',
	sourcesContent: false, // Do not include full source code in the source map
	// OPTIMIZATION
	treeShaking: true,
	minify: true,
	outfile: outFile,
});

if (production) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}