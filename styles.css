
/* SETTINGS TAB */

.shrink-input-setting {
  display: grid;
  grid-template-columns: 3fr 1fr;
  & input {
    width: 100%; /* 'display' and 'boxSizing' may also be useful */
  }
}

.scroll-fraction-setting {
  display: grid;
  grid-template-columns: 2fr 3fr;
  & input.slider {
    width: 100%;
  }
}

.scroll-threshold-setting-control {
  display: flex;
  flex-direction: column;
  align-items: start;
  width: 100%;
}

.break-trigger-time-item-control {
  display: grid;
  grid-template-columns: 1fr 1fr;
  & > input {
    grid-column: span 2;
  }
}

.warning-banner {
  background-color: var(--color-base-10);
  color: var(--color-orange);
  padding: 5px;
  border: 3px solid var(--color-orange);
  border-radius: 4px;
  margin-bottom: 25px;
  display: flex;
  flex-direction: column;
  align-items: center;
  & > * {
    margin: 2px 2px;
  }
}

/* About 'flex'
 * - Always use 'flex' for the parent element (i.e. the container)
  * - Use 'flex-direction' to set the direction of the flex items
  * - Use 'justify-content' to set the alignment of the flex items along the main axis
  * - Use 'align-items' to set the alignment of the flex items along the cross axis
  * - Use 'flex-wrap' to set whether the flex items should wrap or not
 * - For the child elements:
  * - Use 'width' with a percentage value to set the width of the flex items
  *   (it should be less than (100%/#-of-elems))
  * - Use 'flex' with a number value to set the flex-grow property of the flex items
  *   (e.g. with 3 items, use 'flex: 2' in one of them to make it twice as wide as the others,
  *    i.e. it is treated as if it had 2 flex items)
*/


/* PLUGIN NOTICE */

.experimental-plugin-notice {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  & > :first-child { margin-top: 0; }
  & > :last-child { margin-bottom: 0; }
  & > * { margin: .3em 0; }
}


/* PROMPT MODAL */

.modal-prompt-div {
    display: flex;
}

.modal-prompt-input {
    flex-grow: 1;
}

.modal-button-div {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-top: 1rem;
}


/* SUGGEST */

.suggest-input-container {
  padding-right: var(--size-4-3);
  border-bottom: 1px solid var(--background-secondary);
  display: flex;
  flex-direction: row;

  & > .suggest-input {
    flex: 1;
    border-bottom: none;
    &:focus, &:hover { border-bottom: none; }
  }

  & > .suggest-icon-container {
    /* --suggest-icon-count */
    width: calc( 0.8 * var(--suggest-icon-count) * var(--prompt-input-height)); /* multiplier * n_icons * input_height */
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-evenly;

    & > .icon-button-container {
      /* background-color: var(--background-secondary); */
      width:  calc(var(--prompt-input-height) * 0.75);
      height: calc(var(--prompt-input-height) * 0.75);
      /* border: 1px solid var(--text-faint);
      border-radius: 4px; */
      display: grid;
      place-items: center;

      & > .icon-button-svg { height: 80%; width: 80%; }
    }

  }

}


/* HEADING EXTRACTOR */

.target-file-container {
  width: 100%;
  padding: calc(var(--size-4-3) / 2) calc(var(--size-4-3) * 2);
  border-bottom: 1px solid var(--background-secondary);
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  /* & > .target-file-display {
  } */
}

.breadcrumbs {
  font-size: var(--font-smaller);
  color: var(--text-muted);
  & > .breadcrumbs-divider {
    font-weight: bold;
    color: var(--text-accent);
  }
  /* & > .breadcrumbs-part {
  } */
}


.target-file-setter-setting-control {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  & > button {
    flex: 1;
  }
}

.target-file-setting {
  display: flex;
  flex-direction: column;
  align-items: start;
  gap: 10px;

  & .setting-item-control, & .search-input-container {
    width: 100%;
  }

  & .setting-item-info {
    margin-right: 0;
  }
}
